#!/usr/bin/env python3

import json
import logging
import os
import sys
from argparse import ArgumentParser
from pwd import getpwnam
from shlex import quote
from subprocess import PIPE, run
from tempfile import NamedTemporaryFile, TemporaryDirectory

DATA = os.path.join('/', 'var', 'lib', 'local-aur')


def run_with_error(command: str, capture_stdout=False):
    completed_process = run(
        command,
        shell=True,
        stdout=(PIPE if capture_stdout else None)
    )
    if completed_process.returncode != 0:
        logging.error('Executing "%s" returned %s' %
                      (command, completed_process.returncode))
        sys.exit(1)

    if capture_stdout:
        return completed_process.stdout.decode()


def get_package_attr_by_file(file: str, attr: str):
    return [
        e[len('%s = ' % attr):]
        for e in run_with_error('tar -xOf %s .BUILDINFO' % quote(file), capture_stdout=True).split('\n')
        if e.startswith('%s = ' % attr)
    ][0]


def build_package(pkgname: str) -> None:
    with TemporaryDirectory(prefix='%s.local-aur.' % pkgname) as build_dir:
        os.chdir(build_dir)

        run_with_error('git clone https://aur.archlinux.org/%s.git %s --depth=1 --single-branch' %
                       (quote(pkgname), quote(build_dir)))

        dest_files = []

        if os.listdir(build_dir) == ['.git']:
            logging.error('Package "%s" does not exist.', pkgname)
        else:
            run_with_error('makepkg')

            files = run_with_error(
                'makepkg --packagelist', capture_stdout=True).removesuffix('\n').split('\n')

            json_data = get_json()

            if pkgname in json_data['packages']:
                for file in json_data['packages'][pkgname]['dest_files']:
                    run_with_error('rm %s' % quote(file))

            for file in files:
                dest = os.path.join(DATA, 'repo', os.path.basename(file))
                dest_files.append(dest)
                run_with_error('mv %s %s' % (quote(file), quote(dest)))

            json_data['packages'][pkgname] = {
                'commit_hash': get_commit_hash(pkgname),
                'dest_files': dest_files
            }
            save_json(json_data)

        os.chdir('/')

    return dest_files


def add_to_repo(dest_files):
    run_with_error('repo-add %s %s' % (quote(os.path.join(DATA, 'repo',
                   'local-aur.db.tar.gz')), ' '.join(quote(file) for file in dest_files)))


def remove_from_repo(packages):
    run_with_error('repo-remove %s %s' % (quote(os.path.join(DATA, 'repo',
                   'local-aur.db.tar.gz')), ' '.join(quote(package) for package in packages)))


def get_json():
    with open(os.path.join(DATA, 'local-aur.json')) as f:
        return json.load(f)


def save_json(json_data):
    with NamedTemporaryFile('w') as f:
        json.dump(json_data, f)
        f.flush()
        run_with_error('cp %s %s' % (
            quote(f.name), quote(os.path.join(DATA, 'local-aur.json'))))
        run_with_error('chmod 644 %s' % quote(
            os.path.join(DATA, 'local-aur.json')))


def get_commit_hash(package):
    return run_with_error('git ls-remote https://aur.archlinux.org/%s.git HEAD' % package, capture_stdout=True).split('\t', maxsplit=1)[0]


def build_packages(packages, update_all, force):
    json_data = get_json()
    dest_files = []

    if update_all:
        packages.extend(json_data['packages'])

    for package in packages:
        if package in json_data['packages'] and json_data['packages'][package]['commit_hash'] == get_commit_hash(package) and not force:
            logging.info('Package "%s" is already up-to-date.' % package)
        else:
            dest_files.extend(build_package(package))

    if len(dest_files) == 0:
        logging.warning('No packages to add to database.')
    else:
        add_to_repo(dest_files)


def remove_packages(packages):
    json_data = get_json()

    including = []
    change = False
    for package in packages:
        if package in json_data['packages']:
            including.extend(get_package_attr_by_file(file, 'pkgname')
                             for file in json_data['packages'][package]['dest_files'])

            for file in json_data['packages'][package]['dest_files']:
                run_with_error('rm %s' % quote(file))

            del json_data['packages'][package]
            change = True
        else:
            logging.warning('Package "%s" is not installed.', package)

    if change:
        save_json(json_data)
        remove_from_repo(including)


def print_table(data):
    if len(data) != 0:
        significant_column_number = len(data[0]) - 1
        max_column_len = [0] * significant_column_number

        for row in data:
            max_column_len = [max(len(item), column_len)
                              for item, column_len in zip(row, max_column_len)]

        for row in data:
            for i, item in enumerate(row):
                if i == significant_column_number:
                    print(item)
                else:
                    print('%s%s ' %
                          (item, ' ' * (max_column_len[i] - len(item))), end='')


def list_packages(aur, pacman):
    json_data = get_json()

    table = []

    for package in json_data['packages']:
        if aur:
            table.append(['aur', package, json_data['packages']
                         [package]['commit_hash']])
        if pacman:
            for file in json_data['packages'][package]['dest_files']:
                table.append(['pacman', get_package_attr_by_file(
                    file, 'pkgname'), get_package_attr_by_file(file, 'pkgver')])

    print_table(table)


def check_permissions():
    try:
        pwd = getpwnam('local-aur')

        stat = os.stat(DATA)
        if stat.st_uid != pwd.pw_uid or stat.st_gid != pwd.pw_gid:
            os.chown(DATA, pwd.pw_uid, pwd.pw_gid)
            os.chown(os.path.join(DATA, 'local-aur.json'),
                     pwd.pw_uid, pwd.pw_gid)
            os.chown(os.path.join(DATA, 'repo'), pwd.pw_uid, pwd.pw_gid)
            os.chown(os.path.join(DATA, 'home'), pwd.pw_uid, pwd.pw_gid)
            for file in os.listdir(os.path.join(DATA, 'repo')):
                os.chown(os.path.join(DATA, 'repo', file),
                         pwd.pw_uid, pwd.pw_gid)

        os.setgroups([pwd.pw_gid])
        os.setregid(pwd.pw_gid, pwd.pw_gid)
        os.setreuid(pwd.pw_uid, pwd.pw_uid)
        os.environ['USER'] = 'local-aur'
        os.environ['HOME'] = os.path.join(DATA, 'home')
    except PermissionError:
        logging.error('Permission denied')
        exit(2)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO,
                        format='local-aur: %(levelname).1s  %(message)s')
    os.chdir('/')

    parser = ArgumentParser('local-aur')
    parser.set_defaults(command='help')
    subparsers = parser.add_subparsers()

    build_parser = subparsers.add_parser(
        'build', help='Adds packages to the local-aur repo.')
    build_parser.set_defaults(command='build')
    build_parser.add_argument(
        'packages', nargs='*', help='Packages to add to the local-aur repo.')
    build_parser.add_argument(
        '-u', '--update-all', action='store_true', help='Update all packages.')
    build_parser.add_argument(
        '-f', '--force', action='store_true', help='Build even if done already.')

    remove_parser = subparsers.add_parser(
        'remove', help='Removes packages from the local-aur repo.')
    remove_parser.set_defaults(command='remove')
    remove_parser.add_argument(
        'packages', nargs='+', help='Packages to remove from the local-aur repo.')

    remove_parser = subparsers.add_parser('list', help='Lists packages')
    remove_parser.set_defaults(command='list')
    g = remove_parser.add_mutually_exclusive_group()
    g.add_argument('-p', '--pacman', action='store_true',
                   help='Show aur and pacman packages.')
    g.add_argument('-P', '--pacman-only', action='store_true',
                   help='Show pacman packages only.')

    args = parser.parse_args()

    try:
        if args.command == 'help':
            parser.print_usage()
        elif args.command == 'build':
            if len(args.packages) == 0 and not args.update_all:
                logging.error('one of packages and --update-all is required')
                exit(1)
            else:
                check_permissions()
                build_packages(args.packages, args.update_all, args.force)
        elif args.command == 'remove':
            check_permissions()
            remove_packages(args.packages)
        elif args.command == 'list':
            list_packages(not args.pacman_only,
                          args.pacman or args.pacman_only)
    except KeyboardInterrupt:
        logging.error('Canceling')
        exit(130)
