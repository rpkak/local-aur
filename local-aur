#!/usr/bin/env python3

import json
import logging
import os
import shutil
import sys
from argparse import ArgumentParser
from shlex import quote
from subprocess import PIPE, run
from tempfile import TemporaryDirectory

DATA = os.path.join('/', 'var', 'lib', 'local-aur')


def run_with_error(command: str, capture_stdout=False, cwd: str = None, root=False):
    completed_process = run(
        command,
        shell=True,
        stdout=(PIPE if capture_stdout else None),
        user=None if root else 'local-aur',
        group=None if root else 'local-aur',
        extra_groups=None if root else [],
        env=None if root else {
            **os.environ, 'USER': 'local-aur', 'HOME': os.path.join(DATA, 'home')},
        cwd=cwd
    )
    if completed_process.returncode != 0:
        logging.error('Executing "%s" returned %s' %
                      (command, completed_process.returncode))
        sys.exit(1)

    if capture_stdout:
        return completed_process.stdout.decode()


def get_package_attr_by_file(file: str, attr: str):
    return [
        e[len('%s = ' % attr):]
        for e in run_with_error('tar -xOf %s .BUILDINFO' % quote(file), capture_stdout=True).split('\n')
        if e.startswith('%s = ' % attr)
    ][0]


def build_package(pkgname: str) -> None:
    with TemporaryDirectory(prefix='%s.local-aur.' % pkgname) as build_dir:
        shutil.chown(build_dir, 'local-aur', 'local-aur')

        run_with_error('git clone https://aur.archlinux.org/%s.git %s --depth=1 --single-branch' %
                       (quote(pkgname), quote(build_dir)), cwd=build_dir)

        dest_files = []

        if os.listdir(build_dir) == ['.git']:
            logging.error('Package "%s" does not exist.', pkgname)
        else:
            run_with_error('makepkg', cwd=build_dir)

            files = run_with_error('makepkg --packagelist', capture_stdout=True,
                                   cwd=build_dir).removesuffix('\n').split('\n')

            json_data = get_json()

            if pkgname in json_data['packages']:
                for file in json_data['packages'][pkgname]['dest_files']:
                    os.remove(quote(file))

            for file in files:
                dest = os.path.join(DATA, 'repo', os.path.basename(file))
                dest_files.append(dest)
                shutil.move(quote(file), quote(dest))

            json_data['packages'][pkgname] = {
                'commit_hash': get_commit_hash(pkgname),
                'dest_files': dest_files
            }
            save_json(json_data)

    return dest_files


def add_to_repo(dest_files):
    run_with_error('repo-add %s %s' % (quote(os.path.join(DATA, 'repo',
                   'local-aur.db.tar.gz')), ' '.join(quote(file) for file in dest_files)), root=True)


def remove_from_repo(packages):
    run_with_error('repo-remove %s %s' % (quote(os.path.join(DATA, 'repo',
                   'local-aur.db.tar.gz')), ' '.join(quote(package) for package in packages)), root=True)


def get_json():
    with open(os.path.join(DATA, 'local-aur.json')) as f:
        return json.load(f)


def save_json(json_data):
    with open(os.path.join(DATA, 'local-aur.json'), 'w') as f:
        json.dump(json_data, f)


def get_commit_hash(package):
    return run_with_error('git ls-remote https://aur.archlinux.org/%s.git HEAD' % package, capture_stdout=True).split('\t', maxsplit=1)[0]


def build_packages(packages, update_all, force, install):
    json_data = get_json()
    dest_files = []

    if update_all:
        packages.extend(json_data['packages'])

    for package in packages:
        if package in json_data['packages'] and json_data['packages'][package]['commit_hash'] == get_commit_hash(package) and not force:
            logging.info('Package "%s" is already up-to-date.' % package)
        else:
            try:
                new_dest_files = build_package(package)
            except SystemExit:
                os.chdir('/')
                logging.warning('Failed to build package.')
            else:
                dest_files.extend(new_dest_files)

    if len(dest_files) == 0:
        logging.warning('No packages to add to database.')
    else:
        add_to_repo(dest_files)
        if(install):
            install_packages(dest_files)


def install_packages(dest_files):
    run_with_error('pacman -Sy --noconfirm %s' % ' '.join(quote(
        get_package_attr_by_file(file, 'pkgname')) for file in dest_files), root=True)


def remove_packages(packages):
    json_data = get_json()

    including = []
    change = False
    for package in packages:
        if package in json_data['packages']:
            including.extend(get_package_attr_by_file(file, 'pkgname')
                             for file in json_data['packages'][package]['dest_files'])

            for file in json_data['packages'][package]['dest_files']:
                os.remove(quote(file))

            del json_data['packages'][package]
            change = True
        else:
            logging.warning('Package "%s" is not installed.', package)

    if change:
        save_json(json_data)
        remove_from_repo(including)


def print_table(data):
    if len(data) != 0:
        significant_column_number = len(data[0]) - 1
        max_column_len = [0] * significant_column_number

        for row in data:
            max_column_len = [max(len(item), column_len)
                              for item, column_len in zip(row, max_column_len)]

        for row in data:
            for i, item in enumerate(row):
                if i == significant_column_number:
                    print(item)
                else:
                    print('%s%s ' %
                          (item, ' ' * (max_column_len[i] - len(item))), end='')


def list_packages(aur, pacman):
    json_data = get_json()

    table = []

    for package in json_data['packages']:
        if aur:
            table.append(['aur', package, json_data['packages']
                         [package]['commit_hash']])
        if pacman:
            for file in json_data['packages'][package]['dest_files']:
                table.append(['pacman', get_package_attr_by_file(
                    file, 'pkgname'), get_package_attr_by_file(file, 'pkgver')])

    print_table(table)


def check_permissions():
    if os.geteuid() != 0:
        logging.error('Permission denied')
        exit(2)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO,
                        format='local-aur: %(levelname).1s  %(message)s')
    os.chdir('/')

    parser = ArgumentParser('local-aur')
    parser.set_defaults(command='help')
    subparsers = parser.add_subparsers()

    build_parser = subparsers.add_parser(
        'build', help='Adds packages to the local-aur repo.')
    build_parser.set_defaults(command='build')
    build_parser.add_argument(
        'packages', nargs='*', help='Packages to add to the local-aur repo.')
    build_parser.add_argument(
        '-u', '--update-all', action='store_true', help='Update all packages.')
    build_parser.add_argument(
        '-f', '--force', action='store_true', help='Build even if done already.')
    build_parser.add_argument('-i', '--install-directly',
                              action='store_true', help='Install packages after build.')

    remove_parser = subparsers.add_parser(
        'remove', help='Removes packages from the local-aur repo.')
    remove_parser.set_defaults(command='remove')
    remove_parser.add_argument(
        'packages', nargs='+', help='Packages to remove from the local-aur repo.')

    list_parser = subparsers.add_parser('list', help='Lists packages')
    list_parser.set_defaults(command='list')
    g = list_parser.add_mutually_exclusive_group()
    g.add_argument('-p', '--pacman', action='store_true',
                   help='Show aur and pacman packages.')
    g.add_argument('-P', '--pacman-only', action='store_true',
                   help='Show pacman packages only.')

    gpg_parser = subparsers.add_parser(
        'gpg', help='Calls gpg to change the keys used for local-aur.', add_help=False, prefix_chars='\0')
    gpg_parser.set_defaults(command='gpg')
    gpg_parser.add_argument('options', nargs='*',
                            help='Options for the gpg command.')

    args = parser.parse_args()

    try:
        if args.command == 'help':
            parser.print_usage()
        elif args.command == 'build':
            if len(args.packages) == 0 and not args.update_all:
                logging.error('one of packages and --update-all is required')
                exit(1)
            else:
                check_permissions()
                build_packages(args.packages, args.update_all,
                               args.force, args.install_directly)
        elif args.command == 'remove':
            check_permissions()
            remove_packages(args.packages)
        elif args.command == 'list':
            list_packages(not args.pacman_only,
                          args.pacman or args.pacman_only)
        elif args.command == 'gpg':
            check_permissions()
            run(['/usr/bin/gpg', *args.options], user='local-aur', group='local-aur', extra_groups=[],
                env={**os.environ, 'USER': 'local-aur', 'HOME': os.path.join(DATA, 'home')}, )
    except KeyboardInterrupt:
        logging.error('Canceling')
        exit(130)
